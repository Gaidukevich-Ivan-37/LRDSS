import React, { useState, useEffect } from 'react';
import './App.css';

import buttonSound from './button.mp3';
import backgroundMusic from './halloween-music.mp3';

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ StartScreen, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–ø—Å onStartClick
// –í—ã–∑—ã–≤–∞–µ—Ç—Å—è —Ñ—É–Ω–∫—Ü–∏—è onClick, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è —á–µ—Ä–µ–∑ –ø—Ä–æ–ø—Å, –∫–æ–≥–¥–∞ –∫–Ω–æ–ø–∫–∞ "Play" –Ω–∞–∂–∞—Ç–∞
function StartScreen({ onStartClick }) {
  return (
    <div className="container">
      <h1>Halloween Tic-Tac-Toe</h1>
      <button className="start-button" onClick={onStartClick}> 
        Play
      </button>
    </div>
  );
}

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ GridCell, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –ø—Ä–æ–ø—Å—ã value, onClick, gameEnded –∏ playSound
function GridCell({ value, onClick, gameEnded, playSound }) {
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ
  const handleClick = () => {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –æ–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ (gameEnded)
    if (!gameEnded) {
      // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞, –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é onClick –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞
      onClick();
      // –ó–∞—Ç–µ–º –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é playSound –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∑–≤—É–∫–∞
      playSound();
    }
  };

  return (
    // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –∫–ª–µ—Ç–∫–∏
    <div className={`square ${gameEnded ? 'inactive' : ''}`} onClick={handleClick}>
      {value}
    </div>
  );
}

function App() {
  // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∏–≥—Ä—ã
  const grid = Array(9).fill(null);
  const [cells, setCells] = useState(grid); // –•—Ä–∞–Ω–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫
  const [xIsNext, setXIsNext] = useState(true); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —á–µ–π —Ö–æ–¥ (true - –∫—Ä–µ—Å—Ç–∏–∫–∏, false - –Ω–æ–ª–∏–∫–∏)
  const [gameStarted, setGameStarted] = useState(false); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –Ω–∞—á–∞—Ç–∞ –ª–∏ –∏–≥—Ä–∞
  const [gameEnded, setGameEnded] = useState(false); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞
  const [winner, setWinner] = useState(null); // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å
  const [isMusicOn, setIsMusicOn] = useState(true); // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º—É–∑—ã–∫–æ–π

  const playSound = () => {
    const audio = new Audio(buttonSound); // –°–æ–∑–¥–∞–µ–º –∑–≤—É–∫–æ–≤–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è –∑–≤—É–∫–∞ –∫–Ω–æ–ø–∫–∏
    audio.play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –∑–≤—É–∫
  };

  const toggleMusic = () => {
    setIsMusicOn(!isMusicOn); // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º—É–∑—ã–∫–∏
  };

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è gameStarted –∏ isMusicOn
  useEffect(() => {
    const backgroundMusicAudio = new Audio(backgroundMusic); // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏
    backgroundMusicAudio.loop = true; // –ó–∞—Ü–∏–∫–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É

    const playBackgroundMusic = () => {
      if (gameStarted && isMusicOn) {
        backgroundMusicAudio.play(); // –í–æ—Å–ø—Ä–æ–∏–∑–≤–æ–¥–∏–º –º—É–∑—ã–∫—É, –µ—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞—Ç–∞ –∏ –º—É–∑—ã–∫–∞ –≤–∫–ª—é—á–µ–Ω–∞
      } else {
        backgroundMusicAudio.pause(); // –ò–Ω–∞—á–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
      }
    };

    playBackgroundMusic(); // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ñ–æ–Ω–æ–≤–æ–π –º—É–∑—ã–∫–∏

    return () => {
      backgroundMusicAudio.pause(); // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º—É–∑—ã–∫—É –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    };
  }, [gameStarted, isMusicOn]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫–µ –¥–æ—Å–∫–∏
  const handleClick = (index) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—É—Å—Ç–∞ –ª–∏ –∫–ª–µ—Ç–∫–∞ (cells[index] === null) –∏ –Ω–µ –æ–∫–æ–Ω—á–µ–Ω–∞ –ª–∏ –∏–≥—Ä–∞ (!gameEnded)
    if (cells[index] === null && !gameEnded) {
      // –ï—Å–ª–∏ —É—Å–ª–æ–≤–∏–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –º–∞—Å—Å–∏–≤ newCells –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è cells
      const newCells = [...cells];
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–ª–µ—Ç–∫–µ 'ü¶¥' –∏–ª–∏ 'üíÄ', –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (xIsNext)
      newCells[index] = xIsNext ? 'ü¶¥' : 'üíÄ';
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫ —Å –Ω–æ–≤—ã–º –º–∞—Å—Å–∏–≤–æ–º
      setCells(newCells);
      // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–µ—Å–ª–∏ xIsNext –±—ã–ª–æ true, —Ç–µ–ø–µ—Ä—å –¥–µ–ª–∞–µ–º false, –∏ –Ω–∞–æ–±–æ—Ä–æ—Ç)
      setXIsNext(!xIsNext);
    }
  };

  // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è cells (—è—á–µ–π–∫–∏)
  useEffect(() => {
    const winner = calculateWinner(cells); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    if (winner) {
      setWinner(winner); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      setGameEnded(true); // –ó–∞–≤–µ—Ä—à–∞–µ–º –∏–≥—Ä—É
    } else if (cells.every((cell) => cell !== null)) {
      setGameEnded(true); // –ï—Å–ª–∏ –≤—Å–µ —è—á–µ–π–∫–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –∏ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, —Ç–æ –∏–≥—Ä–∞ –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è –≤ –Ω–∏—á—å—é
    }
  }, [cells]);

  const resetGame = () => {
    setCells(grid); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —è—á–µ–µ–∫
    setXIsNext(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∏–Ω–∞—é—â–µ–≥–æ –∏–≥—Ä–æ–∫–∞ (–∫—Ä–µ—Å—Ç–∏–∫–∏)
    setWinner(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
    setGameEnded(false); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∏–≥—Ä—ã
  };

  const startGame = () => {
    setGameStarted(true); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã
  };
  
  // –í–µ—Ä–Ω—É—Ç—å JSX –∫–æ–¥ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–≥—Ä—ã
  return (
    <div className={`container ${gameStarted ? 'halloween' : ''} no-select`}>
      {gameStarted ? ( // –ï—Å–ª–∏ –∏–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
        <>
          <div className="board">
            {cells.map((value, index) => (
              <GridCell
                key={index}
                value={value}
                onClick={() => handleClick(index)} // –ü–µ—Ä–µ–¥–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–ª–∏–∫–∞ –Ω–∞ –∫–ª–µ—Ç–∫—É
                playSound={playSound}
                gameEnded={gameEnded}
              />
            ))}
          </div>
          <div className="status">
            {winner ? `Winner: ${winner}` : gameEnded ? 'Draw' : `Next player: ${xIsNext ? 'ü¶¥' : 'üíÄ'}`}
          </div>
          <div className="button-container">
            <button className="button" onClick={resetGame}>
              Reset Game
            </button>
            <div className="music-control" onClick={toggleMusic} style={{ cursor: 'pointer' }}>
              {isMusicOn ? 'üîä' : 'üîá'}
            </div>
          </div>
        </>
      ) : (
        // –ï—Å–ª–∏ –∏–≥—Ä–∞ –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∞—Å—å, –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ä—Ç–æ–≤—ã–π —ç–∫—Ä–∞–Ω
        <StartScreen onStartClick={startGame} />
      )}
    </div>
  );
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
function calculateWinner(cells) {
  // –í—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∫–æ–º–±–∏–Ω–∞—Ü–∏–∏ –ø–æ–±–µ–¥–Ω—ã—Ö –ª–∏–Ω–∏–π –Ω–∞ –¥–æ—Å–∫–µ
  const lines = [
    [0, 1, 2], [3, 4, 5], [6, 7, 8], 
    [0, 3, 6], [1, 4, 7], [2, 5, 8], 
    [0, 4, 8], [2, 4, 6]
  ];

  // –ü–æ–∏—Å–∫ –ø–æ–±–µ–¥–Ω–æ–π –ª–∏–Ω–∏–∏
  const winningLine = lines.find(([a, b, c]) => cells[a] && cells[a] === cells[b] && cells[a] === cells[c]);

  // –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ–±–µ–¥–Ω–∞—è –ª–∏–Ω–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–∏–º–≤–æ–ª –ø–æ–±–µ–¥–∏—Ç–µ–ª—è (X –∏–ª–∏ O)
  return winningLine ? cells[winningLine[0]] : null;
}

export default App;
